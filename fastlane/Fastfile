# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  # Constants
  APP_IDENTIFIER = "eu.peernetwork.PeerApp"
  EXTENSION_IDENTIFIER = "eu.peernetwork.PeerApp.PayloadModification"
  MAIN_TARGET = "PeerApp"
  EXTENSION_TARGET = "PayloadModification"
  SCHEME = "PeerApp"
  OUTPUT_NAME = "PeerApp"
  KEYCHAIN_NAME = "signing"
  KEYCHAIN_PASSWORD = "temp"

  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: ENV["ASC_KEY_ID"],
     issuer_id: ENV["ASC_ISSUER_ID"],
     key_content: ENV["ASC_PRIVATE_KEY"],
     is_key_content_base64: true,
     in_house: false
   )
 end

 desc "Bump build number based on most recent TestFlight build number"
 lane :fetch_and_increment_build_number do
  # app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
  current_version = get_version_number(
    target: MAIN_TARGET
  )

  latest_build_number = latest_testflight_build_number(
    api_key: api_key,
    version: current_version,
    app_identifier: APP_IDENTIFIER,
    initial_build_number: 1
  )

  new_build_number = latest_build_number + 1

  increment_build_number(
    build_number: new_build_number.to_s,
    xcodeproj: "#{MAIN_TARGET}.xcodeproj"
  )
 end
 
 
  desc "Installs signing certificate and provisioning profiles"
  lane :prepare_signing do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
    # Create temporary keychain
    delete_keychain(
      name: KEYCHAIN_NAME
    ) if File.exist?(File.expand_path("~/Library/Keychains/#{KEYCHAIN_NAME}-db"))
 
    create_keychain(
      name: KEYCHAIN_NAME,
      password: KEYCHAIN_PASSWORD,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
 
    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD
    )
 
    # fetches and installs provisioning profiles from ASC
    sigh(
      api_key: api_key,
      app_identifier: APP_IDENTIFIER,
      readonly: false
    )
    main_profile_name = lane_context[SharedValues::SIGH_NAME]

    sigh(
      api_key: api_key,
      app_identifier: EXTENSION_IDENTIFIER,
      readonly: false
    )
    extension_profile_name = lane_context[SharedValues::SIGH_NAME]

    lane_context[SharedValues::SIGH_MAIN_PROFILE_NAME] = main_profile_name
    lane_context[SharedValues::SIGH_EXTENSION_PROFILE_NAME] = extension_profile_name
  end
 
 
 desc "Build the iOS app for release"
 lane :build_release do 
  main_profile_name = lane_context[SharedValues::SIGH_MAIN_PROFILE_NAME]
  extension_profile_name = lane_context[SharedValues::SIGH_EXTENSION_PROFILE_NAME]

  # Configure code signing
  update_code_signing_settings(
    use_automatic_signing: false,
    targets: [MAIN_TARGET],
    code_sign_identity: "Apple Distribution",
    bundle_identifier: APP_IDENTIFIER,
    profile_name: main_profile_name,
    build_configurations: ["Release"]
  )

  update_code_signing_settings(
    use_automatic_signing: false,
    targets: [EXTENSION_TARGET],
    code_sign_identity: "Apple Distribution",
    bundle_identifier: EXTENSION_IDENTIFIER,
    profile_name: extension_profile_name,
    build_configurations: ["Release"]
  )
 
  # Build the app
  gym(
    scheme: SCHEME,
    output_name: OUTPUT_NAME,
    configuration: "Release",
    export_options: {
      method: "app-store",
      provisioningProfiles: {
        APP_IDENTIFIER => main_profile_name,
        EXTENSION_IDENTIFIER => extension_profile_name
      }
    }
  )
 end
 
 desc "Upload to TestFlight"
 lane :upload_release do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
  deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true,
      run_precheck_before_submit: false
  )
 end
 
 
 desc "Build and upload to TestFlight"
 lane :build_upload_testflight do
   load_asc_api_key
   prepare_signing
   fetch_and_increment_build_number
   build_release
   upload_release
 end
end
