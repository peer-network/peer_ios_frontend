"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Query {
  hello: HelloResponse
}

scalar Decimal

type Mutation {
  register(input: RegistrationInput!): RegisterResponse!
  verifyAccount(userid: ID!): DefaultResponse!
  login(email: String!, password: String!): AuthPayload!
  requestPasswordReset(email: String!): DefaultResponse!
  resetPassword(token: String!, password: String!): DefaultResponse
  refreshToken(refreshToken: String!): AuthPayload!
  contactus(name: String!, email: String!, message: String!): ContactusResponse!
}

type ContactusResponsePayload {
  msgid: Decimal
  email: String
  name: String
  message: String
  ip: String
  createdat: String
}

type ContactusResponse {
  status: String!
  ResponseCode: String
  affectedRows: ContactusResponsePayload
}

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
}

type RegisterResponse {
  status: String
  ResponseCode: String
  userid: ID
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type AuthPayload {
  status: String!
  ResponseCode: String
  accessToken: String
  refreshToken: String
}

input RegistrationInput {
  email: String!
  password: String!
  username: String!
  pkey: String
  referralUuid: ID
}