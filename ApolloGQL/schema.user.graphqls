"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Subscription {
  getChatMessages(chatid: ID!): AddChatmessageResponse!
  setChatMessages(chatid: ID!, content: String!): AddChatmessageResponse!
}

type Query {
  hello: HelloResponse!
  searchuser(userid: ID, username: String, offset: Int, limit: Int): UserSearchResponse!
  getallusers(offset: Int, limit: Int): UserSearchResponse!
  profile(userid: ID, postLimit: Int): ProfileInfo!
  follows(userid: ID, offset: Int, limit: Int): UserFollows!
  friends(offset: Int, limit: Int): UserFriends!
  getuserinfo: GetUserinforesponse!
  getallposts(filterBy: [FilterType!], IgnorList: IgnoredList, sortBy: SortType, userid: ID, postid: ID, title: String, tag: String, from: Date, to: Date, postOffset: Int, postLimit: Int, commentOffset: Int, commentLimit: Int): GetAllPostResponse!
  getpostinfo(postid: ID!): GetPostinforesponse!
  getcommentinfo(commentid: ID!): GetCommentinforesponse!
  parentcomments(parent: ID!, offset: Int, limit: Int): CommentResponse!
  tags(offset: Int, limit: Int): TagSearchResponse!
  tagsearch(tagname: String!, offset: Int, limit: Int): TagSearchResponse!
  searchchat(chatid: ID!, messageOffset: Int, messageLimit: Int): ChatResponse!
  getallchats(sortBy: String, from: Date, to: Date, offset: Int, limit: Int, messageOffset: Int, messageLimit: Int): ChatResponse!
  readMessages(chatid: ID!, offset: Int, limit: Int): AddChatmessageResponse!
  dailyfreestatus: GetDailyResponse!
  currentliquidity: CurrentLiquidity!
  fetchwinslog(day: DayType!, offset: Int, limit: Int): UserLogWins!
  fetchpayslog(day: DayType!, offset: Int, limit: Int): UserLogWins!
  blockedlist(offset: Int, limit: Int): UserBlocked!
  callusermove: StandardResponse!
}

type Mutation {
  updateName(username: String!, password: String!): DefaultResponse!
  updateMail(email: String!, password: String!): DefaultResponse!
  updatePassword(password: String!, expassword: String!): DefaultResponse!
  updatePrivateProfile: DefaultResponse!
  updateBiography(biography: String!): DefaultResponse!
  updateProfilePicture(img: String!): DefaultResponse!
  userFollow(userid: ID!): setFollowUseresponse!
  userBlock(userid: ID!): DefaultResponse!
  deleteAccount(password: String!): DefaultResponse!
  createChat(input: CreateChatInput!): AddChatResponse!
  updateChat(input: UpdateChatInput!): AddChatResponse!
  addParticipants(input: CreateChatParticipantsInput!): AddChatResponse!
  remParticipants(input: CreateChatParticipantsInput!): AddChatResponse!
  addMessage(chatid: ID!, content: String!): AddChatmessageResponse!
  remMessage(chatid: ID!, messid: Int!): DefaultResponse!
  deleteChat(id: ID!): DefaultResponse!
  createFeed(input: CreateFeedInput!): AddPostResponse!
  likeComment(commentid: ID!): DefaultResponse!
  reportComment(commentid: ID!): DefaultResponse!
  deletePost(id: ID!): DefaultResponse!
  createPost(action: PostenType!, input: CreatePostInput!): PostResponse!
  createComment(action: CommentsType!, postid: ID!, parentid: ID, content: String!): CommentResponse!
  resolveActionPost(action: ActionType!, postid: ID!): DefaultResponse!
}

scalar Decimal

scalar DATEN

scalar Date

scalar Tags

enum ActionType {
  LIKE
  DISLIKE
  REPORT
  VIEW
  SHARE
  SAVE
}

enum PostenType {
  POST
}

enum CommentsType {
  COMMENT
}

enum ContenType {
  image
  audio
  video
  text
}

enum FilterType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
  FOLLOWED
  FOLLOWER
}

enum IgnoredList {
  YES
  NO
}

enum SortType {
  NEWEST
  TRENDING
  LIKES
  DISLIKES
  VIEWS
  COMMENTS
}

enum DayType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

type StandardResponse {
  status: String!
  ResponseCode: String
  affectedRows: DATEN
}

type HelloResponse {
  currentuserid: String
}

type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdat: String
}

type UserLogWins {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: [LogWins]
}

type GetDailyResponse {
  status: String!
  ResponseCode: String!
  affectedRows: [DailyResponse]
}

type DailyResponse {
  name: String!
  used: Int!
  available: Int!
}

type CurrentLiquidity {
  currentliquidity: Decimal
}

type GetUserinforesponse {
  status: String!
  ResponseCode: String!
  affectedRows: GetUserInfo
}

type GetUserInfo {
  userid: ID!
  liquidity: Decimal!
  amountposts: Int!
  amountblocked: Int!
  amountfollower: Int!
  amountfollowed: Int!
  amountfriends: Int!
  updatedat: Date
}

type GetPostinforesponse {
  status: String!
  ResponseCode: String!
  affectedRows: GetPostInfo
}

type GetPostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type GetCommentinforesponse {
  status: String!
  ResponseCode: String!
  affectedRows: GetCommentInfo
}

type GetCommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type ChatResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Chat!]
}

type Chat {
  id: ID!
  image: String!
  name: String!
  createdat: Date
  updatedat: Date
  chatmessages: [ChatMessage!]!
  chatparticipants: [ChatParticipant!]!
}

type ChatMessage {
  id: ID!
  senderid: ID!
  chatid: ID!
  content: String!
  createdat: Date!
}

type ChatParticipant {
  userid: ID!
  img: String!
  username: String!
  slug: Int!
  hasaccess: Int!
}

type setFollowUseresponse {
  status: String!
  ResponseCode: String
  isfollowing: Boolean
}

type ProfilPostMed {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdat: String
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type AddPostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Postinfo
}

type Postinfo {
  postid: ID!
  userid: ID!
  title: String!
  media: String!
  mediadescription: String!
  contenttype: String!
}

type AddChatResponse {
  status: String!
  ResponseCode: String
  affectedRows: Chatinfo
}

type Chatinfo {
  chatid: ID
}

type AddChatmessageResponse {
  status: String!
  ResponseCode: String
  affectedRows: [Chatmessageinfo]
}

type Chatmessageinfo {
  messid: ID
  chatid: ID
  userid: ID
  content: String
  createdat: Date
}

type Userinforesponse {
  status: String!
  ResponseCode: String
  affectedRows: Userinfo
}

type Userinfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedat: Date!
}

type UserFriends {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Userinfo]
}

type User {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  createdat: Date
  updatedat: Date
}

type Profile {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isfollowed: Boolean
  isfollowing: Boolean
  amountposts: Int
  amounttrending: Int
  amountfollowed: Int
  amountfollower: Int
  amountfriends: Int!
  imageposts: [ProfilPostMed!]
  textposts: [ProfilPostMed!]
  videoposts: [ProfilPostMed!]
  audioposts: [ProfilPostMed!]
}

type ProfileInfo {
  status: String
  ResponseCode: String
  affectedRows: Profile
}

type ProfilUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
}

type Followes {
  followers: [ProfilUser!]
  following: [ProfilUser!]
}

type UserFollows {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: Followes
}

type BlockedUser {
  blockerid: String
  blockedid: String
  createdat: Date
}

type Blocked {
  blockerid: [BlockedUser!]
  blockedid: [BlockedUser!]
}

type UserBlocked {
  status: String
  ResponseCode: String
  affectedRows: Blocked
}

type UserSearchResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [User]
}

type Tag {
  name: String!
}

type TagSearchResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Tag]
}

type PostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Post
}

type GetAllPostResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Post!]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
  createdat: Date!
  amountlikes: Int!
  amountviews: Int!
  amountcomments: Int!
  amountdislikes: Int!
  amounttrending: Int!
  isliked: Boolean!
  isviewed: Boolean!
  isreported: Boolean!
  isdisliked: Boolean!
  issaved: Boolean!
  tags: [String!]!
  user: ProfilUser!
  comments: [Comment!]!
}

type Comment {
  commentid: ID!
  userid: ID!
  postid: ID!
  parentid: ID
  content: String!
  createdat: Date!
  amountlikes: Int!
  isliked: Boolean!
  user: ProfilUser!
}

type CommentResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Comment]
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

input CreatePostInput {
  title: String!
  mediadescription: String
  contenttype: ContenType!
  media: [String!]
  cover: [String!]
  tags: [String!]
}

input CreateChatInput {
  name: String!
  image: String!
  recipients: [String!]!
}

input UpdateChatInput {
  chatid: ID!
  name: String
  image: String
}

input CreateChatParticipantsInput {
  chatid: ID!
  recipients: [String!]!
}

input CreateFeedInput {
  feedid: ID!
  title: String!
  media: String!
  mediadescription: String
  contenttype: String!
}