"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Subscription {
  getChatMessages(chatid: ID!): AddChatmessageResponse!
  setChatMessages(chatid: ID!, content: String!): AddChatmessageResponse!
}

type Query {
  hello: HelloResponse!
  searchUser(userid: ID, contentFilterBy: ContentFilterType, username: String, offset: Int, limit: Int): UserListResponse!
  listUsers(contentFilterBy: ContentFilterType, offset: Int, limit: Int): UserListResponse!
  getProfile(userid: ID, contentFilterBy: ContentFilterType, postLimit: Int): ProfileInfo!
  listFollowRelations(contentFilterBy: ContentFilterType, userid: ID, offset: Int, limit: Int): FollowRelationsResponse!
  listFriends(contentFilterBy: ContentFilterType, offset: Int, limit: Int): UserFriendsResponse!
  getUserInfo: UserInfoResponse!
  listBlockedUsers(offset: Int, limit: Int): BlockedUsersResponse!
  listPosts(filterBy: [PostFilterType!], contentFilterBy: ContentFilterType, IgnorList: IgnoreOption, sortBy: PostSortType, userid: ID, postid: ID, title: String, tag: String, from: Date, to: Date, offset: Int, limit: Int, commentOffset: Int, commentLimit: Int): PostListResponse!
  getPostInfo(postid: ID!): PostInfoResponse!
  getCommentInfo(commentId: ID!): CommentInfoResponse!
  listChildComments(parent: ID!, offset: Int, limit: Int): CommentResponse!
  listTags(offset: Int, limit: Int): TagSearchResponse!
  searchTags(tagName: String!, offset: Int, limit: Int): TagSearchResponse!
  getChat(chatid: ID!, messageOffset: Int, messageLimit: Int): ChatResponse!
  listChats(sortBy: String, from: Date, to: Date, offset: Int, limit: Int, messageOffset: Int, messageLimit: Int): ChatResponse!
  listChatMessages(chatid: ID!, offset: Int, limit: Int): AddChatmessageResponse!
  getDailyFreeStatus: GetDailyResponse!
  balance: CurrentLiquidity!
  listWinLogs(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  listPaymentLogs(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  getReferralInfo: ReferralInfoResponse!
  referralList(offset: Int, limit: Int): ReferralListResponse!
  listTodaysInteractions: ListTodaysInteractionsResponse!
  getActionPrices: GetActionPricesResponse!
  postEligibility: PostEligibilityResponse!
  getTransactionHistory(type: TokenMovementFilterType, direction: DirectionFilterType, start_date: String, end_date: String, limit: Int, offset: Int, sort: SortFilterType): TransactionResponse!
  postInteractions(getOnly: GetOnly!, postOrCommentId: ID!, offset: Int, limit: Int): PostInteractionResponse
  getTokenomics: TokenomicsResponse!
}

type Mutation {
  updateUserPreferences(userPreferences: UserPreferencesInput): UserPreferencesResponse!
  updateUsername(username: String!, password: String!): DefaultResponse!
  updateEmail(email: String!, password: String!): DefaultResponse!
  updatePassword(password: String!, expassword: String!): DefaultResponse!
  updateBio(biography: String!): DefaultResponse!
  updateProfileImage(img: String!): DefaultResponse!
  toggleUserFollowStatus(userid: ID!): FollowStatusResponse!
  toggleBlockUserStatus(userid: ID!): DefaultResponse!
  deleteAccount(password: String!): DefaultResponse!
  createChat(input: ChatInput!): AddChatResponse!
  updateChatInformations(input: UpdateChatInput!): AddChatResponse!
  addChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  removeChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  sendChatMessage(chatid: ID!, content: String!): AddChatmessageResponse!
  deleteChatMessage(chatid: ID!, messid: Int!): DefaultResponse!
  deleteChat(id: ID!): DefaultResponse!
  createChatFeed(input: FeedInput!): AddPostResponse!
  likeComment(commentid: ID!): DefaultResponse!
  reportComment(commentid: ID!): DefaultResponse!
  reportUser(userid: ID!): DefaultResponse!
  deletePost(id: ID!): DefaultResponse!
  createPost(action: PostType!, input: PostInput!): PostResponse!
  createComment(action: CommentType!, postid: ID!, parentid: ID, content: String!): CommentResponse!
  resolvePostAction(action: PostActionType!, postid: ID!): DefaultResponse!
  resolveTransfer(recipient: ID!, numberoftokens: Int!): DefaultResponse! @deprecated(reason: "Use `resolveTransferV2`.")
  resolveTransferV2(recipient: ID!, numberoftokens: Decimal!, message: String): TransferTokenResponse!
}

scalar Decimal

scalar Date

enum TokenMovementFilterType {
  TRANSACTION
  AIRDROP
  MINT
  PAYMENT
  BURN
}

enum GetOnly {
  VIEW
  LIKE
  DISLIKE
  COMMENTLIKE
}

enum DirectionFilterType {
  INCOME
  DEDUCTION
}

enum SortFilterType {
  NEWEST
  OLDEST
}

enum PostActionType {
  LIKE
  DISLIKE
  REPORT
  VIEW
  SHARE
  SAVE
}

enum PostType {
  POST
}

enum CommentType {
  COMMENT
}

enum ContentFilterType {
  MYGRANDMALIKES
  MYGRANDMAHATES
}

enum ContentType {
  image
  audio
  video
  text
}

enum PostFilterType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
  FOLLOWED
  FOLLOWER
  VIEWED
}

enum IgnoreOption {
  YES
  NO
}

enum PostSortType {
  NEWEST
  TRENDING
  LIKES
  DISLIKES
  VIEWS
  COMMENTS
  FOR_ME
}

enum DayFilterType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

enum OnboardingType {
  INTROONBOARDING
}

input UserPreferencesInput {
  contentFilteringSeverityLevel: ContentFilterType
  shownOnboardings: [OnboardingType!]
}

type Transaction {
  transactionid: String!
  operationid: String!
  transactiontype: String!
  senderid: String!
  recipientid: String!
  tokenamount: Decimal!
  transferaction: String!
  message: String!
  createdat: String!
}

type TransactionResponse {
  status: String!
  ResponseCode: String!
  affectedRows: [Transaction!]
}

type TransferTokenResponse {
  status: String!
  ResponseCode: String!
  affectedRows: TransferToken!
}

type TransferToken {
  tokenSend: Decimal
  tokensSubstractedFromWallet: Decimal
  createdat: String
}

type UserPreferences {
  contentFilteringSeverityLevel: ContentFilterType
  onboardingsWereShown: [OnboardingType!]!
}

type ListTodaysInteractionsResponse {
  status: String!
  ResponseCode: String
  affectedRows: TodaysInteractionsData
}

type TodaysInteractionsData {
  totalInteractions: Decimal
  totalScore: Decimal
  totalDetails: TodaysInteractionsDetailsData
}

type PostInteractionResponse {
  status: String!
  ResponseCode: String
  affectedRows: [ProfileUser!]
}

type TodaysInteractionsDetailsData {
  views: Decimal
  likes: Decimal
  dislikes: Decimal
  comments: Decimal
  viewsScore: Decimal
  likesScore: Decimal
  dislikesScore: Decimal
  commentsScore: Decimal
}

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
  lastMergedPullRequestNumber: String
  companyAccountId: ID
}

type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdat: String
}

type UserLogWins {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: [LogWins]
}

type GetDailyResponse {
  status: String!
  ResponseCode: String!
  affectedRows: [DailyFreeResponse]
}

type DailyFreeResponse {
  name: String!
  used: Int!
  available: Int!
}

type PostEligibilityResponse {
  status: String!
  ResponseCode: String!
  eligibilityToken: String!
}

type CurrentLiquidity {
  status: String!
  ResponseCode: String!
  currentliquidity: Decimal
}

type UserInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: UserInfo
}

type UserInfo {
  userid: ID!
  liquidity: Decimal!
  amountposts: Int!
  amountblocked: Int!
  amountfollower: Int!
  amountfollowed: Int!
  amountfriends: Int!
  invited: ID!
  updatedat: Date
  userPreferences: UserPreferences
}

type PostInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: PostInfo
}

type PostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type CommentInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: CommentInfo
}

type CommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type ChatResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Chat!]
}

type Chat {
  id: ID!
  image: String!
  name: String!
  createdat: Date
  updatedat: Date
  chatmessages: [ChatMessage!]!
  chatparticipants: [ChatParticipant!]!
}

type ChatMessage {
  id: ID!
  senderid: ID!
  chatid: ID!
  content: String!
  createdat: Date!
}

type ChatParticipant {
  userid: ID!
  img: String!
  username: String!
  slug: Int!
  hasaccess: Int!
}

type FollowStatusResponse {
  status: String!
  ResponseCode: String
  isfollowing: Boolean
}

type ProfilePostMedia {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdat: String
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type UserPreferencesResponse {
  status: String!
  ResponseCode: String
  affectedRows: UserPreferences
}

type AddPostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Postinfo
}

type Postinfo {
  postid: ID!
  userid: ID!
  title: String!
  media: String!
  mediadescription: String!
  contenttype: String!
}

type AddChatResponse {
  status: String!
  ResponseCode: String
  affectedRows: Chatinfo
}

type Chatinfo {
  chatid: ID
}

type AddChatmessageResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [ChatMessageInfo]
}

type ChatMessageInfo {
  messid: ID
  chatid: ID
  userid: ID
  content: String
  createdat: Date
}

type BasicUserInfoResponse {
  status: String!
  ResponseCode: String
  affectedRows: BasicUserInfo
}

type BasicUserInfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedat: Date!
}

type UserFriendsResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [BasicUserInfo]
}

type User {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  createdat: Date
  updatedat: Date
}

type Profile {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isfollowed: Boolean
  isfollowing: Boolean
  amountposts: Int
  amounttrending: Int
  amountfollowed: Int
  amountfollower: Int
  amountfriends: Int
  amountblocked: Int
  imageposts: [ProfilePostMedia!]
  textposts: [ProfilePostMedia!]
  videoposts: [ProfilePostMedia!]
  audioposts: [ProfilePostMedia!]
}

type ProfileInfo {
  status: String
  ResponseCode: String
  affectedRows: Profile
}

type ProfileUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
}

type FollowRelations {
  followers: [ProfileUser!]
  following: [ProfileUser!]
}

type FollowRelationsResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: FollowRelations
}

type BlockedUser {
  userid: String
  img: String
  username: String
  slug: Int
}

type BlockedUsers {
  iBlocked: [BlockedUser!]
  blockedBy: [BlockedUser!]
}

type BlockedUsersResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: BlockedUsers
}

type UserListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [User]
}

type Tag {
  name: String!
}

type TagSearchResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Tag]
}

type PostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Post
}

type PostListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Post!]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
  createdat: Date!
  amountlikes: Int!
  amountviews: Int!
  amountcomments: Int!
  amountdislikes: Int!
  amounttrending: Int!
  isliked: Boolean!
  isviewed: Boolean!
  isreported: Boolean!
  isdisliked: Boolean!
  issaved: Boolean!
  tags: [String]!
  url: String!
  user: ProfileUser!
  comments: [Comment!]!
}

type Comment {
  commentid: ID!
  userid: ID!
  postid: ID!
  parentid: ID
  content: String!
  createdat: Date!
  amountlikes: Int!
  amountreplies: Int!
  isliked: Boolean!
  user: ProfileUser!
}

type CommentResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Comment]
}

type ReferralInfoResponse {
  status: String
  ResponseCode: String
  referralUuid: ID
  referralLink: String
}

type ReferralListResponse {
  status: String!
  counter: Int!
  ResponseCode: String!
  affectedRows: ReferralUsers!
}

type ReferralUsers {
  invitedBy: ProfileUser
  iInvited: [ProfileUser!]!
}

input PostInput {
  title: String!
  mediadescription: String
  contenttype: ContentType!
  media: [String!]
  cover: [String!]
  tags: [String!]
  uploadedFiles: String
}

input ChatInput {
  name: String!
  image: String
  recipients: [String!]!
}

input UpdateChatInput {
  chatid: ID!
  name: String
  image: String
}

input ChatParticipantsInput {
  chatid: ID!
  recipients: [String!]!
}

input FeedInput {
  feedid: ID!
  title: String!
  media: String!
  mediadescription: String
  contenttype: String!
}

type ActionPriceResult {
  postPrice: Float!
  likePrice: Float!
  dislikePrice: Float!
  commentPrice: Float!
}

type GetActionPricesResponse {
  status: String!
  ResponseCode: String!
  affectedRows: ActionPriceResult!
}

type TokenomicsResponse {
  status: String!
  ResponseCode: Int!
  actionTokenPrices: ActionPriceResult!
  actionGemsReturns: ActionGemsReturns!
  mintingData: MintingData!
}

type ActionGemsReturns {
  viewGemsReturn: Float!
  likeGemsReturn: Float!
  dislikeGemsReturn: Float!
  commentGemsReturn: Float!
}

type MintingData {
  tokensMintedYesterday: Float!
}